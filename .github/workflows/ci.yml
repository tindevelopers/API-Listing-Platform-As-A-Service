name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install black isort flake8 mypy

    - name: Run Black (code formatting)
      run: black --check --diff laas/

    - name: Run isort (import sorting)
      run: isort --check-only --diff laas/

    - name: Run Flake8 (linting)
      run: |
        flake8 laas/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 laas/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Run MyPy (type checking)
      run: mypy laas/ --ignore-missing-imports --no-strict-optional

    - name: Check for TODO/FIXME comments
      run: |
        if grep -r "TODO\|FIXME" laas/ --exclude-dir=__pycache__; then
          echo "‚ö†Ô∏è  Found TODO/FIXME comments. Consider addressing them before merging."
        fi

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Run Safety (dependency vulnerability scan)
      run: safety check --json --output safety-report.json || true

    - name: Run Bandit (security linting)
      run: bandit -r laas/ -f json -o bandit-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov pytest-xdist
        pip install -e .

    - name: Run tests with coverage
      run: |
        pytest tests/ -v \
          --cov=laas \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-report=html \
          --cov-fail-under=80 \
          --junitxml=test-results.xml \
          -n auto
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        JWT_SECRET_KEY: test-secret-key
        SECRET_KEY: test-secret-key
        ENVIRONMENT: testing

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          test-results.xml
          htmlcov/
          coverage.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, security, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t laas-platform:test .

    - name: Test Docker image
      run: |
        # Test that the image can start
        docker run --rm -d --name laas-test -p 8000:8000 \
          -e DATABASE_URL="sqlite:///test.db" \
          -e JWT_SECRET_KEY="test-key" \
          -e SECRET_KEY="test-secret" \
          -e ENVIRONMENT="testing" \
          laas-platform:test
        
        # Wait for service to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        # Clean up
        docker stop laas-test

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: moderate

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint, security, test, build]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.lint.result == 'success' && needs.security.result == 'success' && needs.test.result == 'success' && needs.build.result == 'success' }}
      run: |
        echo "‚úÖ All CI checks passed!"
        echo "üöÄ Ready for deployment"

    - name: Notify failure
      if: ${{ needs.lint.result == 'failure' || needs.security.result == 'failure' || needs.test.result == 'failure' || needs.build.result == 'failure' }}
      run: |
        echo "‚ùå CI checks failed!"
        echo "Please review the failed jobs and fix the issues"
        exit 1

