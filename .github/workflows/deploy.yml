name: Deploy LAAS Platform to Google Cloud Run

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: laas-platform-1758016737
  REGION: us-east1
  SERVICE_NAME: listing-platform
  IMAGE_NAME: listing-platform

jobs:
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        
    - name: Run linting
      run: |
        flake8 laas/ --count --select=E9,F63,F7,F82 --show-source --statistics
        black --check laas/
        isort --check-only laas/
        
    - name: Run tests
      run: |
        pytest tests/ -v --cov=laas --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build-and-deploy:
    runs-on: ubuntu-latest
    name: Build and Deploy
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Google Auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      
    - name: Grant necessary IAM permissions
      run: |
        # Get the current service account email
        SA_EMAIL=$(gcloud config get-value account)
        echo "Service Account: $SA_EMAIL"
        
        # Grant the service account permission to act as the default compute service account
        gcloud projects add-iam-policy-binding $PROJECT_ID \
          --member="serviceAccount:$SA_EMAIL" \
          --role="roles/iam.serviceAccountUser" || echo "IAM policy binding may already exist"
        
        # Grant Cloud Run Admin role
        gcloud projects add-iam-policy-binding $PROJECT_ID \
          --member="serviceAccount:$SA_EMAIL" \
          --role="roles/run.admin" || echo "Cloud Run Admin role may already exist"
        
        # Grant Artifact Registry Admin role
        gcloud projects add-iam-policy-binding $PROJECT_ID \
          --member="serviceAccount:$SA_EMAIL" \
          --role="roles/artifactregistry.admin" || echo "Artifact Registry Admin role may already exist"
        
        # Grant Storage Admin role for GCR
        gcloud projects add-iam-policy-binding $PROJECT_ID \
          --member="serviceAccount:$SA_EMAIL" \
          --role="roles/storage.admin" || echo "Storage Admin role may already exist"
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push Docker image
      run: |
        # Use Docker Hub for now to avoid GCR permission issues
        IMAGE_URI="tindevelopers/$IMAGE_NAME:$GITHUB_SHA"
        docker build -t $IMAGE_URI .
        docker push $IMAGE_URI
        echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
        
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image=$IMAGE_URI \
          --region=$REGION \
          --platform=managed \
          --allow-unauthenticated \
          --port=8000 \
          --memory=2Gi \
          --cpu=2 \
          --min-instances=0 \
          --max-instances=100 \
          --concurrency=1000 \
          --timeout=300 \
          --service-account="$PROJECT_ID@appspot.gserviceaccount.com" \
          --set-env-vars="ENVIRONMENT=production,GOOGLE_CLOUD_PROJECT_ID=$PROJECT_ID,GOOGLE_CLOUD_REGION=$REGION" \
          --set-secrets="DATABASE_URL=DATABASE_URL:latest,JWT_SECRET_KEY=JWT_SECRET_KEY:latest,SECRET_KEY=SECRET_KEY:latest,REDIS_URL=REDIS_URL:latest" \
          --add-cloudsql-instances="$PROJECT_ID:$REGION:laas-sql"
          
    - name: Get service URL
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format="value(status.url)")
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV
        
    - name: Run health check
      run: |
        echo "Waiting for service to be ready..."
        sleep 30
        curl -f "$SERVICE_URL/health" || exit 1
        
    - name: Comment deployment URL
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `üöÄ **LAAS Platform deployed successfully!**
            
            **Service URL**: ${{ env.SERVICE_URL }}
            **API Documentation**: ${{ env.SERVICE_URL }}/docs
            **Health Check**: ${{ env.SERVICE_URL }}/health
            
            The deployment is ready for testing.`
          })
          
    - name: Update deployment status
      run: |
        echo "‚úÖ Deployment completed successfully!"
        echo "üåê Service URL: $SERVICE_URL"
        echo "üìö API Docs: $SERVICE_URL/docs"
        echo "‚ù§Ô∏è  Health: $SERVICE_URL/health"

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    needs: build-and-deploy
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'